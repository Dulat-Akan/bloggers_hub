import { Component, OnInit, ViewChild, ElementRef,NgZone } from '@angular/core';
import { TranslateService } from '../services/translate/translate.service';
import { HomeserviceService } from '../services/homeservice/homeservice.service';
import { Observable, Subject, interval } from 'rxjs';
import {Geolocation} from '@ionic-native/geolocation/ngx';
import { Location } from '@angular/common';
import { FormBuilder, Validators, FormArray,FormGroup, FormControl} from '@angular/forms';
import { MapsAPILoader } from '@agm/core';
// npm install @google/maps
//import { google } from '@google/maps';
//declare var google: any;





@Component({
  selector: 'app-googlemap',
  templateUrl: './googlemap.page.html',
  styleUrls: ['./googlemap.page.scss'],
})
export class GooglemapPage implements OnInit {

  @ViewChild("search") searchElementRef: ElementRef;
  @ViewChild('gmap') gmapElement: any;

  public latitude: number;
  public longitude: number;
  public searchControl = new FormControl();
  public zoom: number;

  public map: google.maps.Map;


  apiKey: any = 'AIzaSyCY5PUdnImZFQE_u9ODDmjaVeGWI_ojc6I'; /*Your API Key*/


  constructor(
    public homeservice:HomeserviceService,
    public translateservice:TranslateService,
    public ngZone: NgZone,
    public geolocation: Geolocation,
    private mapsAPILoader: MapsAPILoader,
    private location: Location,
  ) {

   }

  setCurrentPosition() {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {

        this.map = new google.maps.Map(this.gmapElement.nativeElement, {
           //center: {lat: -33.8688, lng: 151.2195},
           center: {lat: position.coords.latitude, lng: position.coords.longitude},
           zoom: 13,
           mapTypeId: 'roadmap'
         });

         this.latitude = position.coords.latitude;
         this.longitude = position.coords.longitude;


      });
    }
   }

searchbox:any;

   initMap(){


         this.mapsAPILoader.load().then(() => {

          this.setCurrentPosition();

           this.searchbox = new google.maps.places.SearchBox(this.searchElementRef.nativeElement);
           // this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(this.searchElementRef.nativeElement);
           // this.map.addListener('bounds_changed', function() {
           //    searchbox.setBounds(this.map.getBounds());
           //
           //  });




         });


   }


   changeValue(event: any){

     //console.log(event.target.value);
     setTimeout(() => {
       //console.log(this.searchbox.getPlaces());
       this.setPlaces();
     }, 500);

     //console.log(rangevalue);
     //this.sendForm.controls['sum'].setValue(rangevalue);

   }


   setPlaces(){

      var mmap = new google.maps.Map(this.gmapElement.nativeElement, {
        //center: {lat: -33.8688, lng: 151.2195},
        center: {lat: this.latitude, lng: this.longitude},
        zoom: 16,
        mapTypeId: 'roadmap'
      });



     var markers = [];

     var places = this.searchbox.getPlaces();

      //console.log(places);

       if (!places) {

         setTimeout(() => {
           //console.log(this.searchbox.getPlaces());
           this.setPlaces();
         }, 1000);

         return false;
       }

       var pack = JSON.stringify({ places: places});

       localStorage.setItem("places",pack);

       // Clear out the old markers.
       markers.forEach(function(marker) {
         marker.setMap(null);
       });
       markers = [];

       // For each place, get the icon, name and location.
       var bounds = new google.maps.LatLngBounds();
       places.forEach(function(place) {
         if (!place.geometry) {
           console.log("Returned place contains no geometry");
           return;
         }
         var icon = {
           url: place.icon,
           size: new google.maps.Size(71, 71),
           origin: new google.maps.Point(0, 0),
           anchor: new google.maps.Point(17, 34),
           scaledSize: new google.maps.Size(25, 25)
         };

         // Create a marker for each place.
         markers.push(new google.maps.Marker({
           map: mmap,
           icon: icon,
           title: place.name,
           position: place.geometry.location
         }));

         if (place.geometry.viewport) {
           // Only geocodes have viewport.
           bounds.union(place.geometry.viewport);
         } else {
           bounds.extend(place.geometry.location);
         }
       });
       mmap.fitBounds(bounds);
   }





   goBack(){
     this.location.back();
   }



  language:Observable<any>;
  getTranslate$;

  getTranslate(){
    this.getTranslate$ = this.translateservice.getTranslate().subscribe(data => {
        this.language = data;
      });
  }

  ngOnInit() {

    this.getTranslate();
    this.initMap();

    // setTimeout(() => {
    //       this.initAutocomplete();
    // },3000);

  }

  ngOnDestroy(){

    this.searchElementRef = null;
    this.getTranslate$.unsubscribe();
  }

}
